"use strict";(self.webpackChunkliquid_docs=self.webpackChunkliquid_docs||[]).push([[3152],{7810:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return d},default:function(){return k},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return u}});var a=n(3117),r=n(102),l=(n(7294),n(3905)),i=["components"],o={},d="Babel Filters",p={unversionedId:"babel/filters",id:"babel/filters",title:"Babel Filters",description:"Optional filters provided by the liquid-babel package.",source:"@site/docs/babel/filters.md",sourceDirName:"babel",slug:"/babel/filters",permalink:"/liquid/babel/filters",draft:!1,editUrl:"https://github.com/jg-rp/liquid/tree/docs/docs/babel/filters.md",tags:[],version:"current",frontMatter:{},sidebar:"languageSidebar",previous:{title:"Python Liquid Babel",permalink:"/liquid/babel/introduction"}},m={},u=[{value:"Currency",id:"currency",level:2},{value:"Options",id:"options",level:3},{value:"Money",id:"money",level:3},{value:"DateTime",id:"datetime",level:2},{value:"Options",id:"options-1",level:3},{value:"Decimal / Number",id:"decimal--number",level:2},{value:"Options",id:"options-2",level:3}],c={toc:u};function k(e){var t=e.components,n=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"babel-filters"},"Babel Filters"),(0,l.kt)("p",null,"Optional ",(0,l.kt)("a",{parentName:"p",href:"/liquid/language/filters"},"filters")," provided by the ",(0,l.kt)("a",{parentName:"p",href:"/liquid/babel/introduction"},"liquid-babel")," package."),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"Liquid Babel uses ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/python-babel/babel"},"Python Babel"),". Please refer to the ",(0,l.kt)("a",{parentName:"p",href:"https://babel.pocoo.org/en/latest/index.html"},"Babel docs")," for more information about locales, currency codes and format strings.")),(0,l.kt)("h2",{id:"currency"},"Currency"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"<number> | currency[: group_separator: <boolean>] -> <string>")),(0,l.kt)("p",null,"Currency (aka money) formatting. Return the input number formatted as currency for the current locale."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid"},"{{ 100457.99 | currency }}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"$100,457.99\n")),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"group_separator")," argument to control the output of the current locale's group separators."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid"},"{{ 100457.99 | currency: group_separator: false }}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"$100457.99\n")),(0,l.kt)("p",null,"If the input number is a string, it will be parsed to a decimal according to the current ",(0,l.kt)("em",{parentName:"p"},"input locale"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid"},'{% with input_locale: "de", locale: "en_CA" %}\n  {{ "100.457,99" | currency }}\n{% endwith %}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"US$100,457.99\n")),(0,l.kt)("h3",{id:"options"},"Options"),(0,l.kt)("p",null,"Instances of the ",(0,l.kt)("inlineCode",{parentName:"p"},"Currency")," class default to looking for a locale in a render context variable called ",(0,l.kt)("inlineCode",{parentName:"p"},"locale"),", and a currency code in a render context variable called ",(0,l.kt)("inlineCode",{parentName:"p"},"currency_code"),". It outputs in the locale's standard format and falls back to ",(0,l.kt)("inlineCode",{parentName:"p"},"en_US")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"USD")," if those context variables don't exist."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'from liquid import Environment\nfrom liquid_babel.filters import Currency\n\nenv = Environment()\nenv.add_filter("currency", Currency())\n\ntemplate = env.from_string("{{ 100457.99 | currency }}")\n\nprint(template.render())\nprint(template.render(currency_code="GBP"))\nprint(template.render(locale="de", currency_code="CAD"))\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"$100,457.99\n\xa3100,457.99\n100.457,99\xa0CA$\n")),(0,l.kt)("p",null,"This table shows the available ",(0,l.kt)("inlineCode",{parentName:"p"},"Currency()")," constructor arguments."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Argument"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"currency_code_var")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"str")),(0,l.kt)("td",{parentName:"tr",align:null},"The name of a render context variable that resolves to the current currency code."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"currency_code"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"default_currency_code")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"str")),(0,l.kt)("td",{parentName:"tr",align:null},"A fallback currency code if ",(0,l.kt)("inlineCode",{parentName:"td"},"currency_code_var")," can not be resolved."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"USD"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"locale_var")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"str")),(0,l.kt)("td",{parentName:"tr",align:null},"The name of a render context variable that resolves to the current locale."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"locale"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"default_locale")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"str")),(0,l.kt)("td",{parentName:"tr",align:null},"A fallback locale to use if ",(0,l.kt)("inlineCode",{parentName:"td"},"locale_var")," can not be resolved."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"en_US"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"format_var")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"str")),(0,l.kt)("td",{parentName:"tr",align:null},"The name of a render context variable that resolves to the current currency format string."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"currency_format"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"default_format")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Optional[str]")),(0,l.kt)("td",{parentName:"tr",align:null},"A fallback currency format that is used if ",(0,l.kt)("inlineCode",{parentName:"td"},"format_var")," can not be resolved. If ",(0,l.kt)("inlineCode",{parentName:"td"},"None"),", the standard format for the current locale will be used."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"None"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"currency_digits")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"bool")),(0,l.kt)("td",{parentName:"tr",align:null},"Indicates if the format should override locale specific trailing digit behavior."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"True"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"input_locale_var")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"str")),(0,l.kt)("td",{parentName:"tr",align:null},"The name of a render context variable that resolves to a locale suitable for parsing input strings to decimals."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"input_locale"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"default_input_locale")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"str")),(0,l.kt)("td",{parentName:"tr",align:null},"A fallback locale to use if ",(0,l.kt)("inlineCode",{parentName:"td"},"input_locale_var")," can not be resolved."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"en_US"'))))),(0,l.kt)("h3",{id:"money"},"Money"),(0,l.kt)("p",null,'For convenience, some "money" filters are defined that mimic Shopify\'s money filter behavior. These are instances of ',(0,l.kt)("inlineCode",{parentName:"p"},"Currency")," with specific default formats. All other currency options are set to their defaults."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'from liquid import Environment\nfrom liquid_babel.filters import money\nfrom liquid_babel.filters import money_with_currency\nfrom liquid_babel.filters import money_without_currency\nfrom liquid_babel.filters import money_without_trailing_zeros\n\nenv = Environment()\nenv.add_filter("money", money)\nenv.add_filter("money_with_currency", money_with_currency)\nenv.add_filter("money_without_currency", money_without_currency)\nenv.add_filter("money_without_trailing_zeros", money_without_trailing_zeros)\n\ntemplate = env.from_string("""\\\n{% assign amount = 10 %}\n{{ amount | money }}\n{{ amount | money_with_currency }}\n{{ amount | money_without_currency }}\n{{ amount | money_without_trailing_zeros }}\n""")\n\nprint(template.render(currency_code="CAD", locale="en_CA"))\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"$10.00\n$10.00 CAD\n10.00\n$10\n")),(0,l.kt)("h2",{id:"datetime"},"DateTime"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"<datetime> | datetime[: format: <string>] -> <string>")),(0,l.kt)("p",null,"Date and time formatting. Return the input ",(0,l.kt)("em",{parentName:"p"},"datetime")," formatted according to the current locale. If ",(0,l.kt)("inlineCode",{parentName:"p"},"dt")," is a ",(0,l.kt)("inlineCode",{parentName:"p"},"datetime.datetime")," object ",(0,l.kt)("inlineCode",{parentName:"p"},"datetime.datetime(2007, 4, 1, 15, 30)"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid"},"{{ dt | datetime }}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Apr 1, 2007, 3:30:00 PM\n")),(0,l.kt)("p",null,"The optional ",(0,l.kt)("inlineCode",{parentName:"p"},"format")," argument can be one of ",(0,l.kt)("inlineCode",{parentName:"p"},"'short'"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"'medium'"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"'long'"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"'full'")," or a custom format string. ",(0,l.kt)("inlineCode",{parentName:"p"},"format")," defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"'medium'"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid"},"{% with timezone: 'America/New_York' %}\n  {{ dt | datetime: format: 'full' }}\n{% endwith %}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Sunday, April 1, 2007 at 11:30:00 AM Eastern Daylight Time\n")),(0,l.kt)("p",null,"If the input ",(0,l.kt)("em",{parentName:"p"},"datetime")," is a string, it will be parsed to a datetime object."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid"},"{% with locale: 'en_GB' %}\n  {{ \"Apr 1, 2007, 3:30:00 PM UTC+4\" | datetime: format: 'short' }}\n{% endwith %}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"01/04/2007, 19:30\n")),(0,l.kt)("h3",{id:"options-1"},"Options"),(0,l.kt)("p",null,"Instances of the ",(0,l.kt)("inlineCode",{parentName:"p"},"DateTime")," class default to looking for a timezone in a render context variable called ",(0,l.kt)("inlineCode",{parentName:"p"},"timezone"),", a locale in a render context variable called ",(0,l.kt)("inlineCode",{parentName:"p"},"locale")," and a datetime format in a render context variable called ",(0,l.kt)("inlineCode",{parentName:"p"},"datetime_format"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'from liquid import Environment\nfrom liquid_babel.filters import DateTime\n\nenv = Environment()\nenv.add_filter("datetime", DateTime())\n\ntemplate = env.from_string("{{ \'Apr 1, 2007, 3:30:00 PM\' | datetime }}")\n\nprint(template.render())\nprint(template.render(locale="de", datetime_format="long"))\nprint(template.render(locale="de", timezone="CET", datetime_format="short"))\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Apr 1, 2007, 3:30:00 PM\n1. April 2007 um 15:30:00 UTC\n01.04.07, 17:30\n")),(0,l.kt)("p",null,"This table shows the available ",(0,l.kt)("inlineCode",{parentName:"p"},"DateTime()")," constructor arguments."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Argument"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"timezone_var")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"str")),(0,l.kt)("td",{parentName:"tr",align:null},"The name of a render context variable that resolves to a timezone."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"timezone"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"default_timezone")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"str")),(0,l.kt)("td",{parentName:"tr",align:null},"A fallback timezone to use if ",(0,l.kt)("inlineCode",{parentName:"td"},"timezone_var")," can not be resolved."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"UTC"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"locale_var")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"str")),(0,l.kt)("td",{parentName:"tr",align:null},"The name of a render context variable that resolves to the current locale."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"locale"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"default_locale")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"str")),(0,l.kt)("td",{parentName:"tr",align:null},"A fallback locale to use if ",(0,l.kt)("inlineCode",{parentName:"td"},"locale_var")," can not be resolved."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'en_US"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"format_var")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"str")),(0,l.kt)("td",{parentName:"tr",align:null},"The name of a render context variable that resolves to the current datetime format string."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"datetime_format"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"default_format")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"str")),(0,l.kt)("td",{parentName:"tr",align:null},"A fallback datetime format that is used if ",(0,l.kt)("inlineCode",{parentName:"td"},"format_var")," can not be resolved."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"medium"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"input_timezone_var")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"str")),(0,l.kt)("td",{parentName:"tr",align:null},"The name of a render context variable that resolves to a timezone for parsing datetimes entered as strings."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"input_timezone"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"default_input_timezone")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"str")),(0,l.kt)("td",{parentName:"tr",align:null},"A fallback timezone to use if ",(0,l.kt)("inlineCode",{parentName:"td"},"input_timezone_var")," can not be resolved."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"UTC"'))))),(0,l.kt)("h2",{id:"decimal--number"},"Decimal / Number"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"<number> | decimal[: group_separator: <boolean>] -> <string>")),(0,l.kt)("p",null,"Decimal number formatting. Return the input number formatted as a decimal for the current locale."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid"},"{{ '10000.233' | decimal }}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"10,000.233\n")),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"group_separator")," argument to control the output of the current locale's group separators."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid"},"{{ '10000.233' | decimal: group_separator: false }}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"10000.233\n")),(0,l.kt)("p",null,"If the input number is a string, it will be parsed to a decimal according to the current ",(0,l.kt)("em",{parentName:"p"},"input locale"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-liquid"},'{% with input_locale: "de" %}\n  {{ "100.457,00" | decimal }}\n{% endwith %}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"100,457\n")),(0,l.kt)("h3",{id:"options-2"},"Options"),(0,l.kt)("p",null,"Instances of the ",(0,l.kt)("inlineCode",{parentName:"p"},"Number")," class default to looking for a locale in a render context variable called ",(0,l.kt)("inlineCode",{parentName:"p"},"locale"),". It uses the locale's standard format and falls back to ",(0,l.kt)("inlineCode",{parentName:"p"},"en_US")," if that variable does not exist."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'from liquid import Environment\nfrom liquid_babel.filters import Number\n\nenv = Environment()\n# Register an instance of the `Number` class as a filter called "decimal".\nenv.add_filter("decimal", Number())\n\n# Parse a number from a string in the default (en_US) input locale.\ntemplate = env.from_string("""\\\n{{ \'10,000.23\' | decimal }}\n{{ \'10,000.23\' | decimal: group_separator: false }}\n""")\n\nprint(template.render(locale="de"))\nprint(template.render(locale="en_GB"))\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"10.000,23\n10000,23\n\n10,000.23\n10000.23\n")),(0,l.kt)("p",null,"This table shows the available ",(0,l.kt)("inlineCode",{parentName:"p"},"Number()")," constructor arguments."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Argument"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"decimal_quantization_var")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"str")),(0,l.kt)("td",{parentName:"tr",align:null},"TThe name of a render context variable that resolves to the decimal quantization to be used."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"currency_code"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"default_decimal_quantization")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"bool")),(0,l.kt)("td",{parentName:"tr",align:null},"A fallback decimal quantization if ",(0,l.kt)("inlineCode",{parentName:"td"},"decimal_quantization_var")," can not be resolved."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"USD"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"locale_var")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"str")),(0,l.kt)("td",{parentName:"tr",align:null},"The name of a render context variable that resolves to the current locale."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"locale"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"default_locale")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"str")),(0,l.kt)("td",{parentName:"tr",align:null},"A fallback locale to use if ",(0,l.kt)("inlineCode",{parentName:"td"},"locale_var")," can not be resolved."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"en_US"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"format_var")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"str")),(0,l.kt)("td",{parentName:"tr",align:null},"The name of a render context variable that resolves to the current currency format string."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"currency_format"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"default_format")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Optional[str]")),(0,l.kt)("td",{parentName:"tr",align:null},"A fallback currency format that is used if ",(0,l.kt)("inlineCode",{parentName:"td"},"format_var")," can not be resolved. If ",(0,l.kt)("inlineCode",{parentName:"td"},"None"),", the standard format for the current locale will be used."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"None"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"input_locale_var")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"str")),(0,l.kt)("td",{parentName:"tr",align:null},"The name of a render context variable that resolves to a locale suitable for parsing input strings to decimals."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"input_locale"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"default_input_locale")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"str")),(0,l.kt)("td",{parentName:"tr",align:null},"A fallback locale to use if ",(0,l.kt)("inlineCode",{parentName:"td"},"input_locale_var")," can not be resolved."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"en_US"'))))))}k.isMDXComponent=!0},3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return k}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),p=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=p(n),k=r,s=c["".concat(d,".").concat(k)]||c[k]||u[k]||l;return n?a.createElement(s,i(i({ref:t},m),{},{components:n})):a.createElement(s,i({ref:t},m))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=c;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"}}]);