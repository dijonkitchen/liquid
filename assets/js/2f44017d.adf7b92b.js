"use strict";(self.webpackChunkliquid_docs=self.webpackChunkliquid_docs||[]).push([[806],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return c}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=a.createContext({}),d=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=d(e.components);return a.createElement(o.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,o=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),u=d(n),c=i,k=u["".concat(o,".").concat(c)]||u[c]||s[c]||l;return n?a.createElement(k,r(r({ref:t},m),{},{components:n})):a.createElement(k,r({ref:t},m))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=u;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:i,r[1]=p;for(var d=2;d<l;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4106:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return o},default:function(){return c},frontMatter:function(){return p},metadata:function(){return d},toc:function(){return s}});var a=n(7462),i=n(3366),l=(n(7294),n(3905)),r=["components"],p={id:"Environment"},o="liquid.Environment",d={unversionedId:"api/Environment",id:"api/Environment",title:"liquid.Environment",description:"Shared configuration from which templates can be loaded and parsed. An environment is where you",source:"@site/docs/api/environment.md",sourceDirName:"api",slug:"/api/Environment",permalink:"/liquid/api/Environment",editUrl:"https://github.com/jg-rp/liquid/tree/docs/docs/api/environment.md",tags:[],version:"current",frontMatter:{id:"Environment"},sidebar:"apiSidebar",previous:{title:"liquid.Template",permalink:"/liquid/api/Template"},next:{title:"liquid.BoundTemplate",permalink:"/liquid/api/BoundTemplate"}},m={},s=[{value:"<code>Environment</code>",id:"environment",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>undefined</code>",id:"undefined",level:3},{value:"<code>strict_filters</code>",id:"strict_filters",level:3},{value:"<code>autoescape</code>",id:"autoescape",level:3},{value:"<code>tags</code>",id:"tags",level:3},{value:"<code>filters</code>",id:"filters",level:3},{value:"<code>mode</code>",id:"mode",level:3},{value:"<code>cache</code>",id:"cache",level:3},{value:"<code>auto_reload</code>",id:"auto_reload",level:3},{value:"<code>template_class</code>",id:"template_class",level:3},{value:"<code>globals</code>",id:"globals",level:3},{value:"Methods",id:"methods",level:2},{value:"<code>add_filter</code>",id:"add_filter",level:3},{value:"<code>add_tag</code>",id:"add_tag",level:3},{value:"<code>from_string</code>",id:"from_string",level:3},{value:"<code>get_template</code>",id:"get_template",level:3},{value:"<code>get_template_async</code>",id:"get_template_async",level:3}],u={toc:s};function c(e){var t=e.components,n=(0,i.Z)(e,r);return(0,l.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"liquidenvironment"},"liquid.Environment"),(0,l.kt)("p",null,"Shared configuration from which templates can be loaded and parsed. An environment is where you\nmight register custom tags and filters, or store global context variables that should be included\nwith every template."),(0,l.kt)("h2",{id:"environment"},(0,l.kt)("inlineCode",{parentName:"h2"},"Environment")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"class Environment([options])")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"tag_start_string: str")," - The sequence of characters indicating the start of a liquid tag.\nDefaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"{%"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"tag_end_string: str")," - The sequence of characters indicating the end of a liquid tag. Defaults to\n",(0,l.kt)("inlineCode",{parentName:"p"},"%}"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"statement_start_string: str")," - The sequence of characters indicating the start of an output\nstatement. Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"{{"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"statement_end_string: str")," - The sequence of characters indicating the end of an output\nstatement. Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"}}"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"comment_start_string: str")," - The sequence of characters indicating the start of a comment.\nDefaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"{#"),". ",(0,l.kt)("inlineCode",{parentName:"p"},"template_comments")," must be ",(0,l.kt)("inlineCode",{parentName:"p"},"True")," for ",(0,l.kt)("inlineCode",{parentName:"p"},"comment_start_string")," to have any\neffect.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"comment_end_string: str")," - The sequence of characters indicating the end of a comment. Defaults\nto ",(0,l.kt)("inlineCode",{parentName:"p"},"#}"),". ",(0,l.kt)("inlineCode",{parentName:"p"},"template_comments")," must be ",(0,l.kt)("inlineCode",{parentName:"p"},"True")," for ",(0,l.kt)("inlineCode",{parentName:"p"},"comment_end_string")," to have any effect.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"template_comments: bool")," - If ",(0,l.kt)("inlineCode",{parentName:"p"},"True"),", enable template comments. Where, by default, anything\nbetween ",(0,l.kt)("inlineCode",{parentName:"p"},"{#")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"#}")," is considered a comment. Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"False"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"tolerance: Mode")," - Indicates how tolerant to be of errors. Must be one of ",(0,l.kt)("inlineCode",{parentName:"p"},"Mode.LAX"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"Mode.WARN"),"\nor ",(0,l.kt)("inlineCode",{parentName:"p"},"Mode.STRICT"),". Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"Mode.STRICT"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"loader: Optional[liquid.loaders.BaseLoader]"),' - A template loader. If you want to use the builtin\n"render" or "include" tags, a loader must be configured. Defaults to an empty\n',(0,l.kt)("a",{parentName:"p",href:"dictloader"},"liquid.loaders.DictLoader"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"undefined: liquid.Undefined")," - A subclass of Undefined that represents undefined values. Could be\none of the built-in undefined types, Undefined, DebugUndefined or StrictUndefined. Defaults to\n",(0,l.kt)("inlineCode",{parentName:"p"},"Undefined"),", an undefined type that silently ignores undefined values.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"strict_filters: bool")," - If ",(0,l.kt)("inlineCode",{parentName:"p"},"True"),", will raise an exception upon finding an undefined filter.\nOtherwise undefined filters are silently ignored. Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"True"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"autoescape: bool")," - If ",(0,l.kt)("inlineCode",{parentName:"p"},"True"),', all context values will be HTML-escaped before output unless\nthey\'ve been explicitly marked as "safe". Requires the package Markupsafe. Defaults to ',(0,l.kt)("inlineCode",{parentName:"p"},"False"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"auto_reload: bool")," - If ",(0,l.kt)("inlineCode",{parentName:"p"},"True"),", loaders that have an ",(0,l.kt)("inlineCode",{parentName:"p"},"uptodate")," callable will reload template\nsource data automatically. For deployments where template sources don't change between service\nreloads, setting auto_reload to False can yield an increase in performance by avoiding calls to\n",(0,l.kt)("inlineCode",{parentName:"p"},"uptodate"),". Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"True"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"cache_size: int")," - The capacity of the template cache in number of templates. Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"300"),".\nIf ",(0,l.kt)("inlineCode",{parentName:"p"},"cache_size")," is ",(0,l.kt)("inlineCode",{parentName:"p"},"None")," or less than ",(0,l.kt)("inlineCode",{parentName:"p"},"1"),", it has the effect of setting ",(0,l.kt)("inlineCode",{parentName:"p"},"auto_reload")," to ",(0,l.kt)("inlineCode",{parentName:"p"},"False"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"expression_cache_size: int")," - The capacity of each of the common expression caches. Defaults to\n",(0,l.kt)("inlineCode",{parentName:"p"},"0"),", disabling expression caching.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"globals: Optional[Mapping[str, object]]")," - An optional mapping that will be added to the context\nof any template loaded from this environment. Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"None"),"."))),(0,l.kt)("h2",{id:"properties"},"Properties"),(0,l.kt)("h3",{id:"undefined"},(0,l.kt)("inlineCode",{parentName:"h3"},"undefined")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Type"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"Type[liquid.Undefined]")),(0,l.kt)("p",null,"The undefined type. When an identifier can not be resolved, an instance of undefined is returned."),(0,l.kt)("h3",{id:"strict_filters"},(0,l.kt)("inlineCode",{parentName:"h3"},"strict_filters")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Type"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"bool")),(0,l.kt)("p",null,"Indicates if an undefined filter should raise an exception or be ignored."),(0,l.kt)("h3",{id:"autoescape"},(0,l.kt)("inlineCode",{parentName:"h3"},"autoescape")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Type"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"bool")),(0,l.kt)("p",null,"Indicates if auto-escape is enabled."),(0,l.kt)("h3",{id:"tags"},(0,l.kt)("inlineCode",{parentName:"h3"},"tags")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Type"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"Dict[str, liquid.tag.Tag]")),(0,l.kt)("p",null,"A dictionary mapping tag names to liquid.tag.Tag instances."),(0,l.kt)("h3",{id:"filters"},(0,l.kt)("inlineCode",{parentName:"h3"},"filters")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Type"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"Dict[str, Callable[..., Any]")),(0,l.kt)("p",null,"A dictionary mapping filter names to callable objects implementing a filter's behavior."),(0,l.kt)("h3",{id:"mode"},(0,l.kt)("inlineCode",{parentName:"h3"},"mode")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Type"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"liquid.Mode")),(0,l.kt)("p",null,"The current tolerance mode."),(0,l.kt)("h3",{id:"cache"},(0,l.kt)("inlineCode",{parentName:"h3"},"cache")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Type"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"MutableMapping[Any, Any]")),(0,l.kt)("p",null,"The template cache."),(0,l.kt)("h3",{id:"auto_reload"},(0,l.kt)("inlineCode",{parentName:"h3"},"auto_reload")),(0,l.kt)("p",null,"Indicates if automatic reloading of templates is enabled."),(0,l.kt)("h3",{id:"template_class"},(0,l.kt)("inlineCode",{parentName:"h3"},"template_class")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Type"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"Type[liquid.template.BoundTemplate]")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#get_template"},"Environment.get_template()")," and ",(0,l.kt)("a",{parentName:"p",href:"#from_string"},"Environment.from_string()")," return an\ninstance of ",(0,l.kt)("a",{parentName:"p",href:"#template_class"},"Environment.template_class"),". Defaults to\n",(0,l.kt)("a",{parentName:"p",href:"BoundTemplate"},"liquid.template.BoundTemplate"),"."),(0,l.kt)("h3",{id:"globals"},(0,l.kt)("inlineCode",{parentName:"h3"},"globals")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Type"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"Mapping[str, object]")),(0,l.kt)("p",null,"A dictionary of variables that will be added to the context of every template rendered from the\nenvironment."),(0,l.kt)("h2",{id:"methods"},"Methods"),(0,l.kt)("h3",{id:"add_filter"},(0,l.kt)("inlineCode",{parentName:"h3"},"add_filter")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"add_filter(name, func) -> None")),(0,l.kt)("p",null,"Register a filter function with the environment."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"name: str")," - The filter's name. Does not need to match the function name. This is what you'll use\nto apply the filter to an expression in a liquid template.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"func: Callable[.., Any]")," - Any callable that accepts at least one argument, the result of the\nexpression the filter is applied to."))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return type:")," ",(0,l.kt)("inlineCode",{parentName:"p"},"None")),(0,l.kt)("h3",{id:"add_tag"},(0,l.kt)("inlineCode",{parentName:"h3"},"add_tag")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"add_tag(tag) -> None")),(0,l.kt)("p",null,"Register a liquid tag with the environment. Built-in tags are registered for you automatically with\nevery new ",(0,l.kt)("inlineCode",{parentName:"p"},"Environment"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"tag: Type[liquid.tag.Tag]")," - The ",(0,l.kt)("a",{parentName:"li",href:"tag"},"Tag")," class to register. Not a class instance.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return type:")," ",(0,l.kt)("inlineCode",{parentName:"p"},"None")),(0,l.kt)("h3",{id:"from_string"},(0,l.kt)("inlineCode",{parentName:"h3"},"from_string")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"from_string(source, [options]) -> liquid.template.BoundTemplate")),(0,l.kt)("p",null,"Parse the given string as a Liquid template."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"source: str")," - The liquid template source code.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"name: str")," - Name of the template. Available as Template.name. Defaults to the empty\nstring.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"path: Optional[Union[str, pathlib.Path]]")," - Optional path or identifier to the origin of the\ntemplate. Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"None"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"globals: Optional[Mapping[str, object]]")," - An optional mapping of context variables made\navailable every time the resulting template is rendered. Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"None"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"matter: Optional[Mapping[str, object]]")," - Optional mapping containing variables associated with\nthe template. Could be front matter or other meta data. Defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"None"),"."))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:")," A parsed template bound to the environment and ready to be rendered.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("strong",{parentName:"p"},"Return type:")," ",(0,l.kt)("a",{parentName:"p",href:"BoundTemplate"},"liquid.template.BoundTemplate")),(0,l.kt)("h3",{id:"get_template"},(0,l.kt)("inlineCode",{parentName:"h3"},"get_template")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"get_template(name, globals=None) -> liquid.template.BoundTemplate")),(0,l.kt)("p",null,"Load and parse a template using the configured loader."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"name: str")," - The template's name or identifier. The loader is responsible for interpreting the\nname.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"globals: Optional[Mapping[str, object]]")," - A mapping of context variables made available every\ntime the resulting template is rendered."))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:")," A parsed template bound to the environment and ready to be rendered.",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("strong",{parentName:"p"},"Return type:")," ",(0,l.kt)("a",{parentName:"p",href:"BoundTemplate"},"liquid.template.BoundTemplate"),(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("strong",{parentName:"p"},"Raises:")," ",(0,l.kt)("a",{parentName:"p",href:"exceptions#liquidexceptionstemplatenotfound"},"liquid.exceptions.TemplateNotFound"),": If a template with the given\nname can not be found."),(0,l.kt)("h3",{id:"get_template_async"},(0,l.kt)("inlineCode",{parentName:"h3"},"get_template_async")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"async get_template_async(name, globals=None) -> liquid.template.BoundTemplate")),(0,l.kt)("p",null,"An async version of ",(0,l.kt)("a",{parentName:"p",href:"#environmentget_template"},"get_template"),"."))}c.isMDXComponent=!0}}]);