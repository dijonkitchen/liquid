"use strict";(self.webpackChunkliquid_docs=self.webpackChunkliquid_docs||[]).push([[219],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return u}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,s=m(e,["components","mdxType","originalType","parentName"]),d=c(n),u=i,f=d["".concat(l,".").concat(u)]||d[u]||p[u]||r;return n?a.createElement(f,o(o({ref:t},s),{},{components:n})):a.createElement(f,o({ref:t},s))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=d;var m={};for(var l in t)hasOwnProperty.call(t,l)&&(m[l]=t[l]);m.originalType=e,m.mdxType="string"==typeof e?e:i,o[1]=m;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1575:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return m},metadata:function(){return c},toc:function(){return p}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),o=["components"],m={},l="Comments",c={unversionedId:"introduction/comments",id:"introduction/comments",title:"Comments",description:"Using the standard comment tag you can mark a block of template text as a comment. Python Liquid does not parse or render anything between {% comment %} and {% endcomment %}.",source:"@site/docs/introduction/comments.md",sourceDirName:"introduction",slug:"/introduction/comments",permalink:"/liquid/introduction/comments",editUrl:"https://github.com/jg-rp/liquid/tree/docs/docs/introduction/comments.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Strictness",permalink:"/liquid/introduction/strictness"},next:{title:"HTML Auto-Escape",permalink:"/liquid/introduction/auto-escape"}},s={},p=[{value:"Alternative Comment Syntax",id:"alternative-comment-syntax",level:2}],d={toc:p};function u(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"comments"},"Comments"),(0,r.kt)("p",null,"Using the standard ",(0,r.kt)("a",{parentName:"p",href:"/language/tags#comment"},"comment")," tag you can mark a block of template text as a comment. Python Liquid does not parse or render anything between ",(0,r.kt)("inlineCode",{parentName:"p"},"{% comment %}")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"{% endcomment %}"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="template"',title:'"template"'},"{% comment %} Determine if the current product is on sale. {% endcomment %}\n{% liquid\n  if product.was_price\n    assign on_sale = true\n  else\n    comment was_price is undefined\n    endcomment\n    assign on_sale = false\n  endif\n%}\n")),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Python Liquid will raise a ",(0,r.kt)("inlineCode",{parentName:"p"},"LiquidSyntaxError")," if it finds the string ",(0,r.kt)("inlineCode",{parentName:"p"},"{% endcomment %}")," inside a comment block. Ruby Liquid, on the other hand, will successfully parse fully-formed nested comment blocks, but will fail to parse a comment block containing either a ",(0,r.kt)("inlineCode",{parentName:"p"},"{% comment %}")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"{% endcomment %}")," on its own."))),(0,r.kt)("p",null,"Similarly, with the ",(0,r.kt)("a",{parentName:"p",href:"/liquid/language/tags#inline-comment"},"inline comment tag")," added in Python Liquid version 1.2.0, one or more lines can be commented out in a single inline tag."),(0,r.kt)("p",null,"Both the traditional comment block and the newer inline comment tag suffer from problems when commenting out other liquid tags."),(0,r.kt)("h2",{id:"alternative-comment-syntax"},"Alternative Comment Syntax"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"New in version 1.1.0"))),(0,r.kt)("p",null,"Python Liquid offers an alternative, non-standard template comment syntax. When enabled, anything\nbetween ",(0,r.kt)("inlineCode",{parentName:"p"},"{#")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"#}")," will be treated as a comment. It is disabled by default. Enable it using the\n",(0,r.kt)("a",{parentName:"p",href:"/api/Environment#template_comments"},"template_comments")," argument to ",(0,r.kt)("a",{parentName:"p",href:"/api/Environment"},"liquid.Evironment"),"\nor ",(0,r.kt)("a",{parentName:"p",href:"/api/Template"},"liquid.Template"),"."),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"This alternative comment syntax is non-standard. If you choose to use it in your templates, those\ntemplates are unlikely to render correctly with other implementations of Liquid."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from liquid import Environment\nenv = Environment(template_comments=True)\n")),(0,r.kt)("p",null,"Because this comment syntax is not implemented as a tag, there are no issues commenting out\narbitrary chunks of Liquid."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="template"',title:'"template"'},"{# note: comment this out for now\n  {% for x in (1..5) %}\n    {{ x }}\n  {% endfor %}\n#}\n")),(0,r.kt)("p",null,"Inside ",(0,r.kt)("a",{parentName:"p",href:"/language/tags#liquid"},"liquid")," tags any line starting with a hash is considered a comment."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="template"',title:'"template"'},"{% liquid\n  # greetings\n  echo 'Hello, World!'\n  # Multi line\n  # comment\n%}\n")))}u.isMDXComponent=!0}}]);