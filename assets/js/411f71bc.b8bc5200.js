"use strict";(self.webpackChunkliquid_docs=self.webpackChunkliquid_docs||[]).push([[62],{6531:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var r=n(3117),i=n(102),a=(n(7294),n(3905)),o=["components"],l={},s="Custom Filters",p={unversionedId:"guides/custom-filters",id:"guides/custom-filters",title:"Custom Filters",description:"In Liquid, variables can be modified prior to output or assignment using filters. Filters are",source:"@site/docs/guides/custom-filters.md",sourceDirName:"guides",slug:"/guides/custom-filters",permalink:"/liquid/guides/custom-filters",draft:!1,editUrl:"https://github.com/jg-rp/liquid/tree/docs/docs/guides/custom-filters.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Caching",permalink:"/liquid/introduction/caching"},next:{title:"Custom Tags",permalink:"/liquid/guides/custom-tags"}},d={},u=[{value:"Add a Filter",id:"add-a-filter",level:2},{value:"With Context",id:"with-context",level:3},{value:"With Environment",id:"with-environment",level:3},{value:"Replace a Filter",id:"replace-a-filter",level:2},{value:"Remove a Filter",id:"remove-a-filter",level:2},{value:"Filter Function Decorators",id:"filter-function-decorators",level:2},{value:"<code>@liquid_filter</code>",id:"liquid_filter",level:3},{value:"<code>@sequence_filter</code>",id:"sequence_filter",level:3},{value:"<code>@array_filter</code>",id:"array_filter",level:3},{value:"<code>@string_filter</code>",id:"string_filter",level:3},{value:"<code>@math_filter</code>",id:"math_filter",level:3},{value:"Raising Exceptions From Filter Functions",id:"raising-exceptions-from-filter-functions",level:2}],c={toc:u};function m(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"custom-filters"},"Custom Filters"),(0,a.kt)("p",null,"In Liquid, variables can be modified prior to output or assignment using ",(0,a.kt)("em",{parentName:"p"},"filters"),". Filters are\napplied to a variable using the pipe symbol (",(0,a.kt)("inlineCode",{parentName:"p"},"|"),"), followed by the filter's name and, possibly,\nsome filter arguments."),(0,a.kt)("p",null,"Multiple filters can be chained, effectively piping the output of one filter into the input of\nanother. Here we use the ",(0,a.kt)("a",{parentName:"p",href:"../language/filters#sort"},"sort")," and ",(0,a.kt)("a",{parentName:"p",href:"../language/filters#first"},"first"),"\nfilters to get the cheapest item in a collection of products."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-liquid"},'{% assign cheapest = collection.products | sort: "price" | first %}\n')),(0,a.kt)("p",null,"Filter arguments appear after a colon (",(0,a.kt)("inlineCode",{parentName:"p"},":"),") and are separated by commas (",(0,a.kt)("inlineCode",{parentName:"p"},","),")."),(0,a.kt)("p",null,"You can add to, remove or modify Liquid's ",(0,a.kt)("a",{parentName:"p",href:"../language/filters"},"built-in filters")," to suit your\nneeds by registering filter functions with a ",(0,a.kt)("a",{parentName:"p",href:"../api/Environment"},"liquid.Environment"),", then\nrendering your templates from that environment."),(0,a.kt)("p",null,"A filter function is any callable that accepts at least one argument, the result of the left hand\nside of a filtered expression. The function's return value will be output, assigned or piped to more\nfilters."),(0,a.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"All built-in filters are implemented in this way, so have a look in\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/jg-rp/liquid/tree/main/liquid/builtin/filters"},"liquid/builtin/filters/")," for\nexamples."))),(0,a.kt)("h2",{id:"add-a-filter"},"Add a Filter"),(0,a.kt)("p",null,"Add a custom template filter to an ",(0,a.kt)("a",{parentName:"p",href:"../api/Environment"},"Environment")," by calling its\n",(0,a.kt)("a",{parentName:"p",href:"../api/Environment#add_filter"},"add_filter")," method. Here's a simple example of adding Python's\n",(0,a.kt)("inlineCode",{parentName:"p"},"str.endswith")," as a filter function."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from liquid import Environment, FileSystemLoader\n\nenv = Environment(loader=FileSystemLoader("templates/"))\nenv.add_filter("endswith", str.endswith)\n')),(0,a.kt)("p",null,"In a template, you'd use it like this."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-liquid"},'{% assign foo = "foobar" | endswith: "bar" %}\n{% if foo %}\n    \x3c!-- do something --\x3e\n{% endif %}\n')),(0,a.kt)("h3",{id:"with-context"},"With Context"),(0,a.kt)("p",null,"Decorate filter functions with ",(0,a.kt)("inlineCode",{parentName:"p"},"with_context")," to have the active context passed as a keyword\nargument. Notice that we can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"context")," object to access variables that have not been\npassed as filter arguments."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="myfilters.py"',title:'"myfilters.py"'},'from liquid.filter import with_context\nfrom liquid.filter import string_filter\n\n@string_filter\n@with_context\ndef link_to_tag(label, tag, *, context):\n    handle = context.resolve("handle", default="")\n    return (\n        f\'<a title="Show tag {tag}" href="/collections/{handle}/{tag}">{label}</a>\'\n    )\n')),(0,a.kt)("p",null,"And register it wherever you create your environment."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from liquid import Environment, FileSystemLoader\nfrom myfilters import link_to_tag\n\nenv = Environment(loader=FileSystemLoader("templates/"))\nenv.add_filter("link_to_tag", link_to_tag)\n')),(0,a.kt)("p",null,"In a template, you could then use the link_to_tag filter like this."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-liquid"},'{% if tags %}\n    <dl class="navbar">\n    <dt>Tags</dt>\n        {% for tag in collection.tags %}\n        <dd>{{ tag | link_to_tag: tag }}</dd>\n        {% endfor %}\n    </dl>\n{% endif %}\n')),(0,a.kt)("h3",{id:"with-environment"},"With Environment"),(0,a.kt)("p",null,"Decorate filter functions with ",(0,a.kt)("inlineCode",{parentName:"p"},"with_environment")," to have the active ",(0,a.kt)("a",{parentName:"p",href:"../api/Environment"},"Environment"),"\npassed as a keyword argument. For example, the built-in ",(0,a.kt)("a",{parentName:"p",href:"../language/filters#strip_newlines"},"strip_newlines"),"\nfilter changes it's return value depending on parameters set on the environment."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'@with_environment\n@string_filter\ndef strip_newlines(val: str, *, environment: Environment) -> str:\n    """Return the given string with all newline characters removed."""\n    if environment.autoescape:\n        val = markupsafe_escape(val)\n        return Markup(RE_LINETERM.sub("", val))\n    return RE_LINETERM.sub("", val)\n')),(0,a.kt)("h2",{id:"replace-a-filter"},"Replace a Filter"),(0,a.kt)("p",null,"If given the name of an existing filter function, ",(0,a.kt)("a",{parentName:"p",href:"../api/Environment#add_filter"},"Environment.add_filter()"),"\nwill replace it without warning. For example, suppose you wish to replace the ",(0,a.kt)("a",{parentName:"p",href:"../language/filters#slice"},"slice"),"\nfilter for one which uses start and stop values instead of start and length, and is a bit more\nforgiving in terms of allowed inputs."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="myfilters.py"',title:'"myfilters.py"'},'@liquid_filter\ndef myslice(val, start, stop = None):\n    try:\n        start = int(start)\n    except (ValueError, TypeError) as err:\n        raise FilterArgumentError(\n            f"slice expected an integer start, found {type(start).__name__}"\n        ) from err\n\n    if stop is None:\n        return val[start]\n\n    try:\n        stop = int(stop)\n    except (ValueError, TypeError) as err:\n        raise FilterArgumentError(\n            f"slice expected an integer stop, found {type(stop).__name__}"\n        ) from err\n\n    if isinstance(val, str):\n        return val[start:stop]\n\n    # `val` could be any sequence.\n    return list(val[start:stop])\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from liquid import Environment, FileSystemLoader\nfrom myfilters import myslice\n\nenv = Environment(loader=FileSystemLoader("templates/"))\nenv.add_filter("slice", myslice)\n')),(0,a.kt)("h2",{id:"remove-a-filter"},"Remove a Filter"),(0,a.kt)("p",null,"Remove a built-in filter by deleting it from ",(0,a.kt)("a",{parentName:"p",href:"../api/Environment"},"Environment.filters"),". It's a\nregular dictionary mapping filter names to filter functions."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from liquid import Environment, FileSystemLoader\n\nenv = Environment(loader=FileSystemLoader("templates/"))\ndel env.filters["base64_decode"]\n')),(0,a.kt)("h2",{id:"filter-function-decorators"},"Filter Function Decorators"),(0,a.kt)("p",null,"Although not required, built-in filter functions tend to use decorators for performing common\nargument manipulation and error handling. None of these decorators take any arguments, and they can\nall be found in ",(0,a.kt)("inlineCode",{parentName:"p"},"liquid.filters"),"."),(0,a.kt)("h3",{id:"liquid_filter"},(0,a.kt)("inlineCode",{parentName:"h3"},"@liquid_filter")),(0,a.kt)("p",null,"A filter function decorator that catches any ",(0,a.kt)("inlineCode",{parentName:"p"},"TypeError"),"s raised from the wrapped function. If a ",(0,a.kt)("inlineCode",{parentName:"p"},"TypeError")," is raised, it is re-raised as a ",(0,a.kt)("inlineCode",{parentName:"p"},"liquid.exceptions.FilterARgumentError"),"."),(0,a.kt)("h3",{id:"sequence_filter"},(0,a.kt)("inlineCode",{parentName:"h3"},"@sequence_filter")),(0,a.kt)("p",null,"A filter function decorator that raises a ",(0,a.kt)("inlineCode",{parentName:"p"},"liquid.exceptions.FilterValueError")," if the filter value\ncan not be coerced into an array-like object. Also catches any ",(0,a.kt)("inlineCode",{parentName:"p"},"TypeError"),"s raised from the wrapped function. If a ",(0,a.kt)("inlineCode",{parentName:"p"},"TypeError")," is raised, it is re-raised as a ",(0,a.kt)("inlineCode",{parentName:"p"},"liquid.exceptions.FilterARgumentError"),"."),(0,a.kt)("p",null,"This is intended to mimic the semantics of the reference implementation's ",(0,a.kt)("inlineCode",{parentName:"p"},"InputIterator")," class."),(0,a.kt)("h3",{id:"array_filter"},(0,a.kt)("inlineCode",{parentName:"h3"},"@array_filter")),(0,a.kt)("p",null,"A filter function decorator that raises a ",(0,a.kt)("inlineCode",{parentName:"p"},"liquid.exceptions.FilterValueError")," if the filter value\nis not array-like. Also catches any ",(0,a.kt)("inlineCode",{parentName:"p"},"TypeError"),"s raised from the wrapped function. If a ",(0,a.kt)("inlineCode",{parentName:"p"},"TypeError"),"\nis raised, it is re-raised as a ",(0,a.kt)("inlineCode",{parentName:"p"},"liquid.exceptions.FilterARgumentError"),"."),(0,a.kt)("h3",{id:"string_filter"},(0,a.kt)("inlineCode",{parentName:"h3"},"@string_filter")),(0,a.kt)("p",null,"A filter function decorator that converts the first positional argument to a string and catches any\n",(0,a.kt)("inlineCode",{parentName:"p"},"TypeError"),"s raised from the wrapped function. If a ",(0,a.kt)("inlineCode",{parentName:"p"},"TypeError")," is raised, it is re-raised as a\n",(0,a.kt)("inlineCode",{parentName:"p"},"liquid.exceptions.FilterARgumentError"),"."),(0,a.kt)("h3",{id:"math_filter"},(0,a.kt)("inlineCode",{parentName:"h3"},"@math_filter")),(0,a.kt)("p",null,"A filter function decorator that raises a ",(0,a.kt)("inlineCode",{parentName:"p"},"liquid.excpetions.FilterArgumentError")," if the filter\nvalue is not, or can not be converted to, a number. Also catches any ",(0,a.kt)("inlineCode",{parentName:"p"},"TypeError"),"s raised from the\nwrapped function. If a ",(0,a.kt)("inlineCode",{parentName:"p"},"TypeError")," is raised, it is re-raised as a ",(0,a.kt)("inlineCode",{parentName:"p"},"liquid.exceptions.FilterARgumentError"),"."),(0,a.kt)("h2",{id:"raising-exceptions-from-filter-functions"},"Raising Exceptions From Filter Functions"),(0,a.kt)("p",null,"In general, when raising exceptions from filter functions, those exceptions should be a subclass of\n",(0,a.kt)("a",{parentName:"p",href:"../api/exceptions#liquidexceptionsfiltererror"},"liquid.exceptions.FilterError"),"."))}m.isMDXComponent=!0},3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=i,f=c["".concat(s,".").concat(m)]||c[m]||u[m]||a;return n?r.createElement(f,o(o({ref:t},d),{},{components:n})):r.createElement(f,o({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<a;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"}}]);