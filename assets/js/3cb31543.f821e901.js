"use strict";(self.webpackChunkliquid_docs=self.webpackChunkliquid_docs||[]).push([[133],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return c}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=l(n),c=r,g=u["".concat(p,".").concat(c)]||u[c]||d[c]||i;return n?a.createElement(g,o(o({ref:t},m),{},{components:n})):a.createElement(g,o({ref:t},m))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3825:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return p},default:function(){return c},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return d}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],s={},p="Custom Tags",l={unversionedId:"guides/custom-tags",id:"guides/custom-tags",title:"Custom Tags",description:"Tags allow us to include logic, like loops and conditions, in our Liquid templates. A tag can be",source:"@site/docs/guides/custom-tags.md",sourceDirName:"guides",slug:"/guides/custom-tags",permalink:"/liquid/guides/custom-tags",editUrl:"https://github.com/jg-rp/liquid/tree/docs/docs/guides/custom-tags.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Custom Filters",permalink:"/liquid/guides/custom-filters"},next:{title:"Custom Loaders",permalink:"/liquid/guides/custom-loaders"}},m={},d=[{value:"Add a Tag",id:"add-a-tag",level:2},{value:"Replace a Tag",id:"replace-a-tag",level:2},{value:"Remove a Tag",id:"remove-a-tag",level:2}],u={toc:d};function c(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"custom-tags"},"Custom Tags"),(0,i.kt)("p",null,"Tags allow us to include logic, like loops and conditions, in our Liquid templates. A tag can be\nan ",(0,i.kt)("em",{parentName:"p"},"inline")," tag or a ",(0,i.kt)("em",{parentName:"p"},"block")," tag, and can add to rendered output text or not."),(0,i.kt)("p",null,"Block tags have a start and end tag, with any number of statements in between. Here, the ",(0,i.kt)("inlineCode",{parentName:"p"},"if")," tag\nis a block tag (notice the ",(0,i.kt)("inlineCode",{parentName:"p"},"endif"),"), whereas ",(0,i.kt)("inlineCode",{parentName:"p"},"render")," is not."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-liquid"},'{% if product.available %}\n  {% render "product.html" with product %}\n{% endif %}\n')),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"../language/tags"},"the tag reference")," for an explanation of each built-in tag. Also see the\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/jg-rp/liquid-extra"},"python-liquid-extra")," project, where several additional tags\nand filters are maintained."),(0,i.kt)("h2",{id:"add-a-tag"},"Add a Tag"),(0,i.kt)("p",null,"Register a new tag with an ",(0,i.kt)("a",{parentName:"p",href:"../api/Environment"},"Environment")," by calling its ",(0,i.kt)("a",{parentName:"p",href:"../api/Environment#add_tag"},"add_tag"),"\nmethod. Then render templates from that environment."),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"API documentation for ",(0,i.kt)("inlineCode",{parentName:"p"},"liquid.tag.Tag"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"liquid.ast.Node")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"liquid.expression.Expression")," is a\nwork in progress. Please do ask questions on the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/jg-rp/liquid/issues"},"issue tracker"),"\nif you need assistance."))),(0,i.kt)("p",null,"All tags must inherit from ",(0,i.kt)("inlineCode",{parentName:"p"},"liquid.tag.Tag")," and implement its ",(0,i.kt)("inlineCode",{parentName:"p"},"parse")," method. ",(0,i.kt)("inlineCode",{parentName:"p"},"parse")," takes a single\nargument of type ",(0,i.kt)("inlineCode",{parentName:"p"},"TokenStream")," that wraps an iterator of ",(0,i.kt)("inlineCode",{parentName:"p"},"Token"),"s, and returns an ",(0,i.kt)("inlineCode",{parentName:"p"},"ast.Node"),"\ninstance. More often than not, a new subclass of ",(0,i.kt)("inlineCode",{parentName:"p"},"ast.node")," will accompany each ",(0,i.kt)("inlineCode",{parentName:"p"},"Tag"),". These\n",(0,i.kt)("inlineCode",{parentName:"p"},"Node"),"s make up the parse tree, and are responsible for writing rendered text to the output stream\nvia the required ",(0,i.kt)("inlineCode",{parentName:"p"},"render_to_output")," method."),(0,i.kt)("p",null,"Taking inspiration from ",(0,i.kt)("a",{parentName:"p",href:"https://docs.djangoproject.com/en/3.2/ref/templates/builtins/#with"},"Django's Template Language"),",\nlets implement a ",(0,i.kt)("inlineCode",{parentName:"p"},"with")," tag, which extends the active context for the life of its block."),(0,i.kt)("p",null,"This implementation sticks with Liquid style arguments, using colons rather than equals like Django.\nAnd any variables set inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"with")," block using ",(0,i.kt)("inlineCode",{parentName:"p"},"assign")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"capture")," will persist after it\nends. We could have copied rather than extended the ",(0,i.kt)("inlineCode",{parentName:"p"},"context")," passed to ",(0,i.kt)("inlineCode",{parentName:"p"},"render_to_output"),", creating\na proper block scope."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="withblock.py"',title:'"withblock.py"'},'from __future__ import annotations\n\nimport sys\n\nfrom functools import partial\n\nfrom typing import TYPE_CHECKING\nfrom typing import Dict\nfrom typing import NamedTuple\nfrom typing import Optional\nfrom typing import TextIO\n\nfrom liquid.ast import Node\nfrom liquid.ast import BlockNode\n\nfrom liquid.context import Context\nfrom liquid.expression import Expression\n\nfrom liquid.lex import include_expression_rules\nfrom liquid.lex import _compile_rules\nfrom liquid.lex import _tokenize\n\nfrom liquid.parse import expect\nfrom liquid.parse import get_parser\nfrom liquid.parse import parse_expression\nfrom liquid.parse import parse_unchained_identifier\n\nfrom liquid.stream import TokenStream\nfrom liquid.tag import Tag\n\nfrom liquid.token import Token\nfrom liquid.token import TOKEN_TAG\nfrom liquid.token import TOKEN_EXPRESSION\nfrom liquid.token import TOKEN_TRUE\nfrom liquid.token import TOKEN_FALSE\nfrom liquid.token import TOKEN_NIL\nfrom liquid.token import TOKEN_NULL\nfrom liquid.token import TOKEN_COLON\nfrom liquid.token import TOKEN_AS\nfrom liquid.token import TOKEN_EOF\nfrom liquid.token import TOKEN_COMMA\n\n\nif TYPE_CHECKING:\n    from liquid import Environment\n\nTAG_WITH = sys.intern("with")\nTAG_ENDWITH = sys.intern("endwith")\n\nwith_expression_keywords = frozenset(\n    [\n        TOKEN_TRUE,\n        TOKEN_FALSE,\n        TOKEN_NIL,\n        TOKEN_NULL,\n        TOKEN_AS,\n    ]\n)\n\n# We\'re borrowing token rules from the `include` tag, with our own set of valid\n# keywords.\ntokenize_with_expression = partial(\n    _tokenize,\n    rules=_compile_rules(include_expression_rules),\n    keywords=with_expression_keywords,\n)\n\n\nclass WithKeywordArg(NamedTuple):\n    name: str\n    expr: Expression\n\n\nclass WithNode(Node):\n    def __init__(self, tok: Token, args: Dict[str, Expression], block: BlockNode):\n        self.tok = tok\n        self.args = args\n        self.block = block\n\n    def render_to_output(self, context: Context, buffer: TextIO) -> Optional[bool]:\n        namespace = {k: v.evaluate(context) for k, v in self.args.items()}\n\n        with context.extend(namespace):\n            self.block.render(context, buffer)\n\n\nclass WithTag(Tag):\n    name = TAG_WITH\n    end = TAG_ENDWITH\n\n    def __init__(self, env: Environment):\n        super().__init__(env)\n        self.parser = get_parser(self.env)\n\n    def parse(self, stream: TokenStream) -> Node:\n        expect(stream, TOKEN_TAG, value=TAG_WITH)\n        tok = stream.current\n\n        stream.next_token()\n        expect(stream, TOKEN_EXPRESSION)\n        expr_stream = TokenStream(tokenize_with_expression(stream.current.value))\n\n        # A dictionary to help handle duplicate keywords.\n        args = {}\n\n        while expr_stream.current.type != TOKEN_EOF:\n            key, expr = self.parse_argument(expr_stream)\n            args[key] = expr\n\n            if expr_stream.current.type == TOKEN_COMMA:\n                expr_stream.next_token()  # Eat comma\n\n        stream.next_token()\n        block = self.parser.parse_block(stream, (TAG_ENDWITH, TOKEN_EOF))\n        expect(stream, TOKEN_TAG, value=TAG_ENDWITH)\n\n        return WithNode(tok=tok, args=args, block=block)\n\n    def parse_argument(self, stream: TokenStream) -> WithKeywordArg:\n        key = str(parse_unchained_identifier(stream))\n        stream.next_token()\n\n        expect(stream, TOKEN_COLON)\n        stream.next_token()  # Eat colon\n\n        val = parse_expression(stream)\n        stream.next_token()\n\n        return WithKeywordArg(key, val)\n')),(0,i.kt)("p",null,"We can then add ",(0,i.kt)("inlineCode",{parentName:"p"},"WithTag")," tag to an environment like this. Notice that ",(0,i.kt)("inlineCode",{parentName:"p"},"add_tag")," take a class, not\na class instance."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from liquid import Environment\nfrom withblock import WithTag\n\nenv = Environment()\nenv.add_tag(WithTag)\n")),(0,i.kt)("p",null,"Things worthy of note:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Block tags (those that have a start and end tag with any number of statements in\nbetween) are expected to leave the stream with their closing tag as the current token.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The template lexer does not attempt to tokenize tag expressions. It is up to the\n",(0,i.kt)("inlineCode",{parentName:"p"},"Tag")," to tokenize and parse its expression, if any, possibly using or extending a\nbuilt-in expression lexer found in ",(0,i.kt)("inlineCode",{parentName:"p"},"liquid.lex"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"expect")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"expect_peek")," helper functions inspect tokens from the stream and\nraise an appropriate exception should a token's type or value not meet a tag's\nexpectations.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"You can find parsers for common expression types in ",(0,i.kt)("inlineCode",{parentName:"p"},"liquid.parse"),", all of which return a\n",(0,i.kt)("inlineCode",{parentName:"p"},"liquid.expression.Expression"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"Expression"),"s have an ",(0,i.kt)("inlineCode",{parentName:"p"},"evaluate(context)")," method for use from\n",(0,i.kt)("inlineCode",{parentName:"p"},"ast.Node.render_to_output"),"."))),(0,i.kt)("p",null,"All built-in tags are implemented in this way, so have a look in ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/jg-rp/liquid/tree/main/liquid/builtin/tags"},"liquid/builtin/tags/")," for examples."),(0,i.kt)("h2",{id:"replace-a-tag"},"Replace a Tag"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"../api/Environment#add_tag"},"Environment.add_tag()")," registers a tag using the ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," property\ndefined on the ",(0,i.kt)("inlineCode",{parentName:"p"},"Tag")," class. If you register a tag with the same name as an existing tag, it will be\nreplaced without warning."),(0,i.kt)("p",null,"For example, the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/jg-rp/liquid-extra#if-not"},"if (not)")," tag from\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/jg-rp/liquid-extra"},"python-liquid-extra")," is a drop-in replacement for the\nstandard ",(0,i.kt)("inlineCode",{parentName:"p"},"if")," tag."),(0,i.kt)("h2",{id:"remove-a-tag"},"Remove a Tag"),(0,i.kt)("p",null,"Remove a tag, either built-in or custom, by deleting it from ",(0,i.kt)("a",{parentName:"p",href:"../api/Environment"},"Environment.tags"),".\nIt's a regular dictionary mapping tag names to ",(0,i.kt)("inlineCode",{parentName:"p"},"Tag")," classes."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from liquid import Environment\nfrom liquid.builtin.tags.ifchanged_tag import IfChangedTag\n\nenv = Environment()\ndel env.filters[IfChangedTag.name]\n")))}c.isMDXComponent=!0}}]);