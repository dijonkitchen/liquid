"use strict";(self.webpackChunkliquid_docs=self.webpackChunkliquid_docs||[]).push([[4394],{9719:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return m},default:function(){return d},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var r=n(3117),i=n(102),o=(n(7294),n(3905)),a=["components"],l={},m="Resource Limits",p={unversionedId:"guides/resource-limits",id:"guides/resource-limits",title:"Resource Limits",description:"_New in version 1.4.0_",source:"@site/docs/guides/resource-limits.md",sourceDirName:"guides",slug:"/guides/resource-limits",permalink:"/liquid/guides/resource-limits",draft:!1,editUrl:"https://github.com/jg-rp/liquid/tree/docs/docs/guides/resource-limits.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Undefined Variables",permalink:"/liquid/guides/undefined-variables"},next:{title:"Django Liquid",permalink:"/liquid/guides/django-liquid"}},s={},u=[{value:"Context Depth Limit",id:"context-depth-limit",level:2},{value:"Local Namespace Limit",id:"local-namespace-limit",level:2},{value:"Loop Iteration Limit",id:"loop-iteration-limit",level:2},{value:"Output Stream Limit",id:"output-stream-limit",level:2}],c={toc:u};function d(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"resource-limits"},"Resource Limits"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"New in version 1.4.0"))),(0,o.kt)("p",null,"For deployments where template authors are untrusted, you can set limits on some resources to avoid malicious templates from consuming too much memory or too many CPU cycles. Set one or more resource limits by subclassing a Liquid ",(0,o.kt)("a",{parentName:"p",href:"/liquid/api/Environment"},"Environment"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from liquid import Environment\n\nclass MyEnvironment(Environment):\n    context_depth_limit = 30\n    local_namespace_limit = 2000\n    loop_iteration_limit = 1000\n    output_stream_limit = 15000\n\n\nenv = MyEnvironment()\n\ntemplate = env.from_string("""\\\n{% for x in (1..1000000) %}\n{% for y in (1..1000000) %}\n    {{ x }},{{ y }}\n{% endfor %}\n{% endfor %}\n""")\n\ntemplate.render()\n# LoopIterationLimitError: loop iteration limit reached, on line 1\n')),(0,o.kt)("h2",{id:"context-depth-limit"},"Context Depth Limit"),(0,o.kt)("p",null,"The maximum number of times a render context can be extended or wrapped before a ",(0,o.kt)("a",{parentName:"p",href:"/liquid/api/exceptions#liquidexceptionscontextdeptherror"},(0,o.kt)("inlineCode",{parentName:"a"},"ContextDepthError"))," is raised."),(0,o.kt)("p",null,"This helps us guard against recursive use of the ",(0,o.kt)("inlineCode",{parentName:"p"},"include")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"render")," tags. The default context depth limit is 30. Before Python Liquid version 1.4.0, a context depth limit of 30 was hard coded."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from liquid import Environment\nfrom liquid import DictLoader\n\nenv = Environment(\n    loader=DictLoader(\n        {\n            "foo": "{% render \'bar\' %}",\n            "bar": "{% render \'foo\' %}",\n        }\n    )\n)\n\ntemplate = env.from_string("{% render \'foo\' %}")\ntemplate.render()\n# ContextDepthError: maximum context depth reached, possible recursive render, on line 1\n')),(0,o.kt)("h2",{id:"local-namespace-limit"},"Local Namespace Limit"),(0,o.kt)("p",null,"The maximum number of bytes (according to ",(0,o.kt)("inlineCode",{parentName:"p"},"sys.getsizeof()"),") allowed in a template's local namespace, per render, before a ",(0,o.kt)("a",{parentName:"p",href:"/liquid/api/exceptions#liquidexceptionslocalnamespacelimiterror"},(0,o.kt)("inlineCode",{parentName:"a"},"LocalNamespaceLimitError"))," exception is raised. Note that we only count the size of the local namespace values, not its keys."),(0,o.kt)("p",null,"The default ",(0,o.kt)("inlineCode",{parentName:"p"},"local_namespace_limit")," is ",(0,o.kt)("inlineCode",{parentName:"p"},"None"),", meaning there is no limit."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from liquid import Environment\n\nclass MyEnvironment(Environment):\n    local_namespace_limit = 50  # Very low, for demonstration purposes.\n\n\nenv = MyEnvironment()\n\ntemplate = env.from_string("""\\\n{% assign x = "Nunc est nulla, pellentesque ac dui id erat curae." %}\n""")\n\ntemplate.render()\n# LocalNamespaceLimitError: local namespace limit reached, on line 1\n')),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("a",{parentName:"p",href:"https://doc.pypy.org/en/latest/cpython_differences.html"},"PyPy")," does not implement ",(0,o.kt)("inlineCode",{parentName:"p"},"sys.getsizeof"),". Instead of a size in bytes, when run with PyPy, ",(0,o.kt)("inlineCode",{parentName:"p"},"local_namespace_limit")," will degrade to being the number of distinct values in a template's local namespace.")),(0,o.kt)("h2",{id:"loop-iteration-limit"},"Loop Iteration Limit"),(0,o.kt)("p",null,"The maximum number of loop iterations allowed before a ",(0,o.kt)("a",{parentName:"p",href:"/liquid/api/exceptions#liquidexceptionsloopiterationlimiterror"},(0,o.kt)("inlineCode",{parentName:"a"},"LoopIterationLimitError"))," is raised."),(0,o.kt)("p",null,"The default ",(0,o.kt)("inlineCode",{parentName:"p"},"loop_iteration_limit")," is ",(0,o.kt)("inlineCode",{parentName:"p"},"None"),", meaning there is no limit."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from liquid import Environment\n\nclass MyEnvironment(Environment):\n    loop_iteration_limit = 999\n\n\nenv = MyEnvironment()\n\ntemplate = env.from_string("""\\\n{% for x in (1..100) %}\n{% for y in (1..100) %}\n    {{ x }},{{ y }}\n{% endfor %}\n{% endfor %}\n""")\n\ntemplate.render()\n# LoopIterationLimitError: loop iteration limit reached, on line 1\n')),(0,o.kt)("p",null,"Other built in tags that contribute to the loop iteration counter are ",(0,o.kt)("inlineCode",{parentName:"p"},"render"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"include")," (when using their ",(0,o.kt)("inlineCode",{parentName:"p"},"{% render 'thing' for some.thing %}")," syntax) and ",(0,o.kt)("inlineCode",{parentName:"p"},"tablerow"),". If a partial template is rendered within a ",(0,o.kt)("inlineCode",{parentName:"p"},"for")," loop, the loop counter is carried over to the render context of the partial template."),(0,o.kt)("h2",{id:"output-stream-limit"},"Output Stream Limit"),(0,o.kt)("p",null,"The maximum number of bytes that can be written to a template's output stream, per render, before an ",(0,o.kt)("a",{parentName:"p",href:"/liquid/api/exceptions#liquidexceptionsoutputstreamlimiterror"},(0,o.kt)("inlineCode",{parentName:"a"},"OutputStreamLimitError"))," exception is raised."),(0,o.kt)("p",null,"The default ",(0,o.kt)("inlineCode",{parentName:"p"},"output_stream_limit")," is ",(0,o.kt)("inlineCode",{parentName:"p"},"None"),", meaning there is no limit."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from liquid import Environment\n\nclass MyEnvironment(Environment):\n    output_stream_limit = 20  # Very low, for demonstration purposes.\n\n\nenv = MyEnvironment()\n\ntemplate = env.from_string("""\\\n{% if false %}\nthis is never rendered, so will not contribute the the output byte counter\n{% endif %}\nHello, {{ you }}!\n""")\n\ntemplate.render(you="World")\n# \'\\nHello, World!\\n\'\n\ntemplate.render(you="something longer that exceeds our limit")\n# OutputStreamLimitError: output stream limit reached, on line 4\n')))}d.isMDXComponent=!0},3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return d}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var m=r.createContext({}),p=function(e){var t=r.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(m.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,m=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=p(n),d=i,f=c["".concat(m,".").concat(d)]||c[d]||u[d]||o;return n?r.createElement(f,a(a({ref:t},s),{},{components:n})):r.createElement(f,a({ref:t},s))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=c;var l={};for(var m in t)hasOwnProperty.call(t,m)&&(l[m]=t[m]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"}}]);